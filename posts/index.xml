<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Pixels May Jitter</title><link>https://ryp.github.io/posts/</link><description>Recent content in Posts on Pixels May Jitter</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 09 Jun 2022 20:37:12 +0300</lastBuildDate><atom:link href="https://ryp.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Zig as a Drop-in C++ Compiler</title><link>https://ryp.github.io/2022/zig-as-a-drop-in-c-compiler/</link><pubDate>Thu, 09 Jun 2022 20:37:12 +0300</pubDate><guid>https://ryp.github.io/2022/zig-as-a-drop-in-c-compiler/</guid><description>Alright, mad scientist time: you guys know about Zig? This language in interesting in itself and I recommend you check it out if you didn&amp;rsquo;t before, but for today we&amp;rsquo;re staying in magical C++ land.
Got the idea from this blog post that I could use the Zig compiler as replacement for Clang, GCC and MSVC in my engine and stop having to use Visual Studio on windows.
Sounds enticing, right?</description></item><item><title>Minesweeper with Zig</title><link>https://ryp.github.io/2021/minesweeper-with-zig/</link><pubDate>Mon, 20 Sep 2021 12:00:00 +0300</pubDate><guid>https://ryp.github.io/2021/minesweeper-with-zig/</guid><description>After porting my CHIP-8 emulator to Zig (repo on GitHub) and writing about it, I decided to come back for some fun and wanted to try my hand on building a small game from the ground up.
Sometimes you win Sometimes you lose Sweeping the mines Here&amp;rsquo;s a few pain points I noticed coming back to Zig for the second time:
Pointers: Zig has several pointer types, and it can be confusing sometimes when choosing.</description></item><item><title>CHIP-8 Emulator: Zig port</title><link>https://ryp.github.io/2021/chip-8-emulator-zig-port/</link><pubDate>Sun, 04 Jul 2021 12:00:00 +0300</pubDate><guid>https://ryp.github.io/2021/chip-8-emulator-zig-port/</guid><description>After porting a CHIP-8 emulator to Rust (repo on GitHub), I decided to come back to trying new languages, feeling like Rust isn&amp;rsquo;t at a state where I would consider writing new code in it. So if not Rust, what kind shiny new thing is around on the block?
Zig Zig has been around some time now, the community is active but didn&amp;rsquo;t grow into large scale yet. It seems to aim at low-level programmers, as a safer alternative to C with a lean feature set and better performance.</description></item><item><title>Prototoy: offline shadertoy clone in rust</title><link>https://ryp.github.io/2021/prototoy-offline-shadertoy-clone-in-rust/</link><pubDate>Fri, 04 Jun 2021 12:00:00 +0300</pubDate><guid>https://ryp.github.io/2021/prototoy-offline-shadertoy-clone-in-rust/</guid><description>Time for reinventing the wheel again!
Shadertoy is great and all, but I didn&amp;rsquo;t find it super comfortable to use.
Can&amp;rsquo;t use your own editor Browsers eat my battery! Instead of staying mad at things, I took this as a learning opportunity and made an offline version.
Introducing: Prototoy! Prototoy is a rather simple program, it allows you to load a shader from your disk, show it in a window and watch for file changes to hot reload it.</description></item><item><title>CHIP-8 Emulator: Rust port</title><link>https://ryp.github.io/2019/chip-8-emulator-rust-port/</link><pubDate>Tue, 09 Jul 2019 12:00:00 +0300</pubDate><guid>https://ryp.github.io/2019/chip-8-emulator-rust-port/</guid><description>tl;dr: I ported my CHIP-8 emulator to Rust.
Amongst game dev circles, Rust is certainly getting a lot of attention recently, especially since Ready At Dawn announced they would be switching entirely to Rust for newly-written code. This is certainly a big thing, coming from such an experienced studio (we gamedevs are notoriously picky when adopting new libraries/languages), and proves that Rust is taken seriously for replacing C++.
Personally, I tend to dislike C++ and its ecosystem, and couldn&amp;rsquo;t be happier that new languages try address the need for a superior paradigm.</description></item><item><title>CHIP-8 Emulator</title><link>https://ryp.github.io/2019/chip-8-emulator/</link><pubDate>Mon, 06 May 2019 12:00:00 +0200</pubDate><guid>https://ryp.github.io/2019/chip-8-emulator/</guid><description>Thought it was a fun idea to implement a very basic emulator so I did just that! My CHIP-8 emu can run most vanilla ROMs without problems. It&amp;rsquo;s a simple 8bits computer with a rather reduced instruction set, so it wasn&amp;rsquo;t too much pain to get things going.
I used the publicly available ROMs for testing as well as a bunch of custom unit tests. I have to say it was a fun little side projet, especially since I didn&amp;rsquo;t have to write any of the games for it, just load that ROM and here we go!</description></item><item><title>Unofficial Vulkan API Manpages</title><link>https://ryp.github.io/2018/unofficial-vulkan-api-manpages/</link><pubDate>Mon, 29 Oct 2018 21:10:00 +0100</pubDate><guid>https://ryp.github.io/2018/unofficial-vulkan-api-manpages/</guid><description>I still find good old manpages really useful for coding, their long lifetime made them reliable and well integrated into a lot of tools (vim in my case). What&amp;rsquo;s more satisfying than accessing the exact doc you&amp;rsquo;re looking for in a couple of keystrokes? It&amp;rsquo;s hard to go back to browsing HTML docs after that&amp;hellip;
Imagine the sadness when Khronos stopped supporting the vulkan API manpages! Long story short, I tried to add the support upstream (see PR #839), ended up keeping an unofficial fork and released something usable there (formatting is still weird sometimes).</description></item><item><title>Weekend Raytracer Project</title><link>https://ryp.github.io/2018/weekend-raytracer-project/</link><pubDate>Tue, 28 Aug 2018 19:59:00 +0200</pubDate><guid>https://ryp.github.io/2018/weekend-raytracer-project/</guid><description>Raytracers are one of those cool programs that you can write in a few hours and already have something fun to play with. I never got to write one at school so I figured I would spend a day or two and get one going!
Because many other sources recommend it, I downloaded Peter Shirley&amp;rsquo;s book Ray tracing in one weekend and gave it a go. Even though I was familiar with the concepts, it was a good exercise and also surprisingly fun!</description></item><item><title>AMD GCN ISA Syntax Highlighting for Vim</title><link>https://ryp.github.io/2018/amd-gcn-isa-syntax-highlighting-for-vim/</link><pubDate>Fri, 29 Jun 2018 16:00:00 +0100</pubDate><guid>https://ryp.github.io/2018/amd-gcn-isa-syntax-highlighting-for-vim/</guid><description>I got into low-level shader optimizations lately, and realised that not many tools are provided for the job. Since i&amp;rsquo;m looking at GCN assembly regularly now, i used the occasion to write a decent syntax highlighting for it inside vim.
That way i got to go through the whole GCN ISA document (props to AMD for having the only public GPU ISA out there) as well as learning some vim scripting basics!</description></item></channel></rss>