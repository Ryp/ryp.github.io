<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>graphics on Pixels May Jitter</title><link>https://ryp.github.io/tags/graphics/</link><description>Recent content in graphics on Pixels May Jitter</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 04 Jun 2021 12:00:00 +0300</lastBuildDate><atom:link href="https://ryp.github.io/tags/graphics/index.xml" rel="self" type="application/rss+xml"/><item><title>Prototoy: offline shadertoy clone in rust</title><link>https://ryp.github.io/2021/prototoy-offline-shadertoy-clone-in-rust/</link><pubDate>Fri, 04 Jun 2021 12:00:00 +0300</pubDate><guid>https://ryp.github.io/2021/prototoy-offline-shadertoy-clone-in-rust/</guid><description>Time for reinventing the wheel again!
Shadertoy is great and all, but I didn&amp;rsquo;t find it super comfortable to use.
Can&amp;rsquo;t use your own editor Browsers eat my battery! Instead of staying mad at things, I took this as a learning opportunity and made an offline version.
Introducing: Prototoy! Prototoy is a rather simple program, it allows you to load a shader from your disk, show it in a window and watch for file changes to hot reload it.</description></item><item><title>Weekend Raytracer Project</title><link>https://ryp.github.io/2018/weekend-raytracer-project/</link><pubDate>Tue, 28 Aug 2018 19:59:00 +0200</pubDate><guid>https://ryp.github.io/2018/weekend-raytracer-project/</guid><description>Raytracers are one of those cool programs that you can write in a few hours and already have something fun to play with. I never got to write one at school so I figured I would spend a day or two and get one going!
Because many other sources recommend it, I downloaded Peter Shirley&amp;rsquo;s book Ray tracing in one weekend and gave it a go. Even though I was familiar with the concepts, it was a good exercise and also surprisingly fun!</description></item><item><title>AMD GCN ISA Syntax Highlighting for Vim</title><link>https://ryp.github.io/2018/amd-gcn-isa-syntax-highlighting-for-vim/</link><pubDate>Fri, 29 Jun 2018 16:00:00 +0100</pubDate><guid>https://ryp.github.io/2018/amd-gcn-isa-syntax-highlighting-for-vim/</guid><description>I got into low-level shader optimizations lately, and realised that not many tools are provided for the job. Since i&amp;rsquo;m looking at GCN assembly regularly now, i used the occasion to write a decent syntax highlighting for it inside vim.
That way i got to go through the whole GCN ISA document (props to AMD for having the only public GPU ISA out there) as well as learning some vim scripting basics!</description></item></channel></rss>