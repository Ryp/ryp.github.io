<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>rust on Pixels May Jitter</title><link>https://ryp.github.io/tags/rust/</link><description>Recent content in rust on Pixels May Jitter</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 04 Jun 2021 12:00:00 +0300</lastBuildDate><atom:link href="https://ryp.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Prototoy: offline shadertoy clone in rust</title><link>https://ryp.github.io/2021/prototoy-offline-shadertoy-clone-in-rust/</link><pubDate>Fri, 04 Jun 2021 12:00:00 +0300</pubDate><guid>https://ryp.github.io/2021/prototoy-offline-shadertoy-clone-in-rust/</guid><description>Time for reinventing the wheel again!
Shadertoy is great and all, but I didn&amp;rsquo;t find it super comfortable to use.
Can&amp;rsquo;t use your own editor Browsers eat my battery! Instead of staying mad at things, I took this as a learning opportunity and made an offline version.
Introducing: Prototoy! Prototoy is a rather simple program, it allows you to load a shader from your disk, show it in a window and watch for file changes to hot reload it.</description></item><item><title>CHIP-8 Emulator: Rust port</title><link>https://ryp.github.io/2019/chip-8-emulator-rust-port/</link><pubDate>Tue, 09 Jul 2019 12:00:00 +0300</pubDate><guid>https://ryp.github.io/2019/chip-8-emulator-rust-port/</guid><description>tl;dr: I ported my CHIP-8 emulator to Rust.
Amongst game dev circles, Rust is certainly getting a lot of attention recently, especially since Ready At Dawn announced they would be switching entirely to Rust for newly-written code. This is certainly a big thing, coming from such an experienced studio (we gamedevs are notoriously picky when adopting new libraries/languages), and proves that Rust is taken seriously for replacing C++.
Personally, I tend to dislike C++ and its ecosystem, and couldn&amp;rsquo;t be happier that new languages try address the need for a superior paradigm.</description></item></channel></rss>